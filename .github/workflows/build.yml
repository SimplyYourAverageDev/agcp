name: Build AGCP

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false  # Don't cancel all jobs if one fails
      matrix:
        include:
          # Windows builds
          - os: windows
            arch: amd64
            runner: windows-latest
            extension: .exe
          - os: windows
            arch: arm64
            runner: windows-latest
            extension: .exe
          # Linux builds
          - os: linux
            arch: amd64
            runner: ubuntu-latest
            extension: ""
          - os: linux
            arch: arm64
            runner: ubuntu-latest
            extension: ""
          # macOS builds
          - os: darwin
            arch: amd64
            runner: macos-latest
            extension: ""
          - os: darwin
            arch: arm64
            runner: macos-latest
            extension: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.4'

    - name: Go Version Check
      run: go version

    - name: Build
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        go build -v -o agcp${{ matrix.extension }}

    - name: List build directory (Debug)
      shell: bash
      run: |
        ls -la
        echo "Current directory: $(pwd)"
        echo "Looking for: agcp${{ matrix.extension }}"
        # For Windows, ensure permissions are correct
        if [ "${{ matrix.os }}" = "windows" ]; then
          chmod +x agcp${{ matrix.extension }} || true
        fi

    - name: Test
      if: >-
        (matrix.os == 'windows' && runner.os == 'Windows') ||
        (matrix.os == 'linux' && runner.os == 'Linux') ||
        (matrix.os == 'darwin' && runner.os == 'macOS')
      run: go test -v ./...

    - name: Verify Build Output
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows" ]; then
          if [ ! -f ./agcp.exe ]; then
            echo "Build output not found: agcp.exe"
            exit 1
          fi
        else
          if [ ! -f ./agcp ]; then
            echo "Build output not found: agcp"
            exit 1
          fi
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: agcp-${{ matrix.os }}-${{ matrix.arch }}
        path: ./agcp${{ matrix.extension }}
        if-no-files-found: error
        compression-level: 0  # Disable compression for binary files

  release:
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts (Debug)
        run: |
          find artifacts -type f | sort
          # Make Linux/macOS binaries executable
          find artifacts -name "agcp" -type f -exec chmod +x {} \;

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('Build {0}', github.sha) }}
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('build-{0}', github.sha) }}
          generate_release_notes: true

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the upload URL directly from the create_release step outputs
          UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
          
          if [ -z "$UPLOAD_URL" ] || [ "$UPLOAD_URL" = "null" ]; then
            echo "Failed to get upload URL from create_release outputs."
            exit 1  # Exit with error if upload URL is invalid
          fi
          
          # Remove template parameters from URL if present
          UPLOAD_URL=$(echo "$UPLOAD_URL" | sed 's/{?.*}//')
          
          echo "Upload URL: $UPLOAD_URL"
          
          # Upload each asset
          for asset in artifacts/agcp-*/agcp*; do
            if [ ! -f "$asset" ]; then
              echo "Asset not found: $asset"
              continue
            fi
            
            filename=$(basename "$asset")
            echo "Uploading $filename..."
            
            # Upload asset with error handling
            if ! curl -XPOST "$UPLOAD_URL?name=$filename" \
                 -H "Authorization: token $GITHUB_TOKEN" \
                 -H "Content-Type: application/octet-stream" \
                 --data-binary @"$asset"; then
              echo "Failed to upload $filename"
              exit 1
            fi
          done